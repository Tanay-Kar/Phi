[LINE grammar A:A02 <Contents[< Token ID :: 'eq1' >, < Token COLON :: 'COLON' >, < Expression ((<FACTOR < Token NUMBER :: '3' > sign=+> MULT <FACTOR < Token ID :: 'x' > sign=+>) MINUS (<FACTOR < Token NUMBER :: '4' > sign=+> MULT <FACTOR < Token ID :: 'y' > sign=+>))>, < Token ASSIGN :: 'ASSIGN' >, < Expression 19>, < Token EOL :: 'EOL' >]>]
[LINE grammar A:A02 <Contents[< Token ID :: 'eq2' >, < Token COLON :: 'COLON' >, < Expression ((<FACTOR < Token NUMBER :: '6' > sign=+> MULT <FACTOR < Token ID :: 'x' > sign=+>) PLUS (<FACTOR < Token NUMBER :: '2' > sign=+> MULT <FACTOR < Token ID :: 'y' > sign=+>))>, < Token ASSIGN :: 'ASSIGN' >, < Expression 10>, < Token EOL :: 'EOL' >]>]
[LINE grammar I:I02 <Contents[< Token SOLVE :: 'SOLVE' >, < Tuple :: < Token ID :: 'eq1' > ,< Token ID :: 'eq2' > >, < Token FOR :: 'FOR' >, < Tuple :: < Token ID :: 'x' > ,< Token ID :: 'y' > >, < Token EOL :: 'EOL' >]>]
[LINE grammar C:C01 <Contents[< Function f args [[< Token ID :: 'x' >]]>, < Token ASSIGN :: 'ASSIGN' >, < Expression ((((<FACTOR < Token NUMBER :: '3' > sign=+> MULT <FACTOR < Token ID :: 'x' > sign=+>) CARET <FACTOR < Token NUMBER :: '2' > sign=+>) PLUS (<FACTOR < Token NUMBER :: '2' > sign=+> MULT <FACTOR < Token ID :: 'x' > sign=+>)) MINUS <FACTOR < Token NUMBER :: '1' > sign=+>)>, < Token EOL :: 'EOL' >]>]
[LINE grammar J:J04 <Contents[< Token INTG :: 'INTG' >, < Function f args [[< Token ID :: 'x' >]]>, < Token WRT :: 'WRT' >, < Token ID :: 'x' >, < Token FROM :: 'FROM' >, < Expression -1>, < Token TO :: 'TO' >, < Expression 2>, < Token PLT :: 'PLT' >, < Token EOL :: 'EOL' >]>]
